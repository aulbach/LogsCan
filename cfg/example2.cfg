###########################################
# Global section
#
# where to store the position, till where the logfile was scanned at the last time
positionfile  = .logscan-aul-dev-php_error.pos

# This number of bytes we "jump back" into the logfile to make sure we scan unfinished written blocks
positionjumpback = 5000

# the logfile itself
logfile       = php_error.log

# the blockdelimiter;
# logscan reads line by line, until this marker is found,
# the read lines are one block and so it can be parsed as one string
blockdelimit  = /^\[\d\d-[A-Z][a-z][a-z]-\d{4} \d\d:\d\d:\d\d]\s/

# a block cannot be longer than this number of lines (to prevent eating up memory)
maxblocklines = 1000

# so many blocks should be read in maximum
# use this option for very, very high log traffic to limit load and overrun!
# set empty or 0 to ignore
maxblocks     =

# by default everything is printed to STDOUT and STDERR
stdout        =
stderr        =

# some more examples, which make sense
#
# This makes sense if you use crontab to mail the errors.
# In this case you DO NOT NEED to configure the email-addresses for the rules,
# and every error goes to ONE adress:
#
# stdout = >/dev/null
# stderr =
#
# You can of course log into different logfiles,
# but also log everything into ONE logfile:
#
# stdout        = >>./logscan.log
# stderr        = >>./logscan.log

# logline uses sprintf to echo a line
# this looks like: [Tue Apr 21 12:57:18 2009 #0] START with configuration 'logscan.config'
logline       = [%s #%%s] %s\n

# this makes also sense:
# logline = %2$s\n

# sendmail config
sendmail      = /usr/sbin/sendmail
sendmail_from = logscanner@devbiz
sendmail_subject = [LOGSCAN] %s in %s

# this number of rules can be found,
# after this the script ends itself as when the eof has reached
maxfoundrules = 500


###########################################
# rules-section
# you can add here as many rules as you want, every rule begins with "<..RULENAME..>"
[SCANRULES]
# "regex" : regular expression for this rule, must match a block (= line)
# "find"  : regular expression: if "regex" is found match with this. If found then $1 is taken for special output.
# "messg" : Message for this rule
# "email" : email-address to send reports - if unset no mail is sent!
<FATAL>
regex   = /] PHP Fatal error:/
messg   = Fatal PHP-error
email   = alex.aulbach@mayflower.de

<ALARMS>
regex   = /] INCOMING ALARM from/
find    = /sernum:(\w+)/
messg   = Incoming Alarms
email   = alex.aulbach@mayflower.de
---------------------------------------------------------------
